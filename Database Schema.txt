-- Create the filesystem_usage table
CREATE TABLE SYSTEM.FILESYSTEM_USAGE
(
  ID                NUMBER GENERATED BY DEFAULT AS IDENTITY ( START WITH 341 MAXVALUE 9999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER NOKEEP NOSCALE) NOT NULL,
  SERVER_NAME       VARCHAR2(255 BYTE)          NOT NULL,
  IP_ADDRESS        VARCHAR2(50 BYTE)           NOT NULL,
  FILESYSTEM        VARCHAR2(255 BYTE)          NOT NULL,
  USAGE_PERCENTAGE  VARCHAR2(10 BYTE)           NOT NULL,
  TIMESTAMP         TIMESTAMP(6)                DEFAULT CURRENT_TIMESTAMP
)
TABLESPACE SYSTEM
PCTUSED    40
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;

-- Add a primary key to the table
ALTER TABLE SYSTEM.FILESYSTEM_USAGE ADD (
  PRIMARY KEY
  (ID)
  USING INDEX
    TABLESPACE SYSTEM
    PCTFREE    10
    INITRANS   2
    MAXTRANS   255
    STORAGE    (
                INITIAL          64K
                NEXT             1M
                MINEXTENTS       1
                MAXEXTENTS       UNLIMITED
                PCTINCREASE      0
                FREELISTS        1
                FREELIST GROUPS  1
                BUFFER_POOL      DEFAULT
               )
  ENABLE VALIDATE);


-- Create an index on the TIMESTAMP column
CREATE INDEX SYSTEM.IDX_FILESYSTEM_USAGE_TIMESTAMP ON SYSTEM.FILESYSTEM_USAGE
(TIMESTAMP)
LOGGING
TABLESPACE SYSTEM
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            FREELISTS        1
            FREELIST GROUPS  1
            BUFFER_POOL      DEFAULT
           );

-- Drop existing job if it exists
BEGIN
    DBMS_SCHEDULER.drop_job (
        job_name => 'SYSTEM.DELETE_OLD_DATA_JOB',
        force    => TRUE
    );
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -27475 THEN
            RAISE;
        END IF;
END;
/

-- Create a DBMS_SCHEDULER job to delete old data every 2 hours
BEGIN
    DBMS_SCHEDULER.create_job (
        job_name        => 'SYSTEM.DELETE_OLD_DATA_JOB',
        job_type        => 'PLSQL_BLOCK',
        job_action      => 'BEGIN DELETE FROM SYSTEM.FILESYSTEM_USAGE WHERE TIMESTAMP < SYSTIMESTAMP - INTERVAL ''1'' HOUR; END;',
        start_date      => SYSTIMESTAMP,
        repeat_interval => 'FREQ=HOURLY;INTERVAL=2',
        enabled         => TRUE
    );
END;
/
